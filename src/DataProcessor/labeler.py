import json, os
from tqdm import tqdm
from config import API_KEY

from src.LLM.GPTChatCompletion import *

prompt = """
Given the following query:

{query}

Provide binary labels for each city in the following set, based on your best knowledge of tourism:

Try to be strict, only accept cities that you are confident are very relavant to the query. 

Provide your answer in the form of a JSON, where the keys are the city names and the values are the binary labels of 0 or 1.

['Corfu', 'Kagoshima', 'Mahad', 'Providence', 'Jiamusi', 'Porto', 'Nantes', 'Luzhou', 'Fredericton', 'Kos', 'Nanded', 'Longyan', 'Campo Grande', 'Kunming', 'Managua', 'Nanton', 'Neiva', 'Hurghada', 'Boise', 'Samsun', 'Harare', 'Muscat', 'Smithers', 'Stavanger', 'Qiqihar', 'Constantine', 'Aracaju', 'Vittoria', 'Zunyi', 'Trabzon', 'Sivas', 'Lugano', 'Apia', 'Zhengzhou', 'Jammu', 'Palmerston North', 'Yanai', 'Ouagadougou', 'Obihiro', 'Ishigaki', 'Matsuyama', 'Harrisonburg', 'Mazatlan', 'Varna', 'Terceira', 'Taupo', 'Puerto Plata', 'Belfast', 'Edmonton', 'Harrisburg', 'Zhangzhou', 'Bari', 'Macau', 'Bismarck', 'Cancu√©n', 'Rotorua', 'Vilanculos', 'Indore', 'Lilongwe', 'Brindisi', 'Wichita', 'Iqaluit', 'Tbilisi', 'Zurich', 'Papeete', 'Fukuoka', 'Londrina', 'Ottawa', 'Shijiazhuang', 'Tashkent', 'Hiroshima', 'Fuzhou', 'Wemindji', 'Ontario', 'Laredo', 'Alexandria', 'Kayseri', 'Longyearbyen', 'Rome', 'Manizales', 'Jingdezhen', 'Haiku', 'Thunder Bay', 'Chicago', 'Sapporo', 'Lisbon', 'Moosonee', 'Richards Bay', 'Bydgoszcz', 'Takamatsu', 'Zadar', 'Libreville', 'Montpelier', 'Baton Rouge', 'Spokane', 'Heraklion', 'Stuttgart', 'Voronezh', 'Puebla', 'Harar', 'Erzurum', 'Churchill', 'Timaru', 'Recife', 'Manta', 'Chongqing', 'Hargeisa', 'Banjul', 'Auckland', 'Gokayama', 'Edinburgh', 'Kwajalein', 'Traverse City', 'Providenciales', 'Ljubljana', 'Jinan', 'Dickinson', 'Sacramento', 'Paros', 'Knoxville', 'Bermuda', 'Frankfurt', 'Kirkenes', 'Konya', 'Brasilia', 'Gander', 'Visby', 'Chandigarh', 'Kamloops', 'Whangarei', 'Varadero', 'Kavala', 'Toyama', 'Prague', 'Koror', 'Novosibirsk', 'Aguadilla', 'Batumi', 'Hays', 'Muenster', 'Cape Girardeau', 'Petrolia', 'Devils Lake', 'Charlottetown', 'Bahrain', 'Grand Rapids', 'Xiamen', 'Aguas Calientes', 'Jeddah', 'Moline', 'Billund', 'Montevideo', 'Aomori', 'Freetown', 'Palermo', 'Steamboat Springs', 'Moscow', 'Ranchi', 'Asmara', 'Santorini', 'Jacksonville', 'Kristiansund', 'Oslo', 'Amritsar', 'Larnaca', 'Oberlin', 'Sendai', 'Abbotsford', 'Lagosa', 'Nantucket', 'Pasco', 'Surat', 'Penticton', 'Cranbrook', 'Villahermosa', 'Bodrum', 'Grande Prairie', 'Rajkot', 'Stockholm', 'Xining', 'Pensacola', 'Agartala', 'Louisville', 'Puerto Maldonado', 'Fortaleza', 'Bangkok', 'Dubrovnik', 'Trieste', 'Monterrey', 'Strasbourg', 'Isfahan', 'Binghamton', 'Lahore', 'Luxor', 'San Francisco', 'Hangzhou', 'Caracas', 'Addis Ababa', 'Fairbanks', 'Geneva', 'Vijayawada', 'Hohhot', 'Winnipeg', 'Ankara', 'Salvador', 'Algiers', 'Debrecen', 'Smara', 'Seville', 'Hyderabad', 'Oklahoma City', 'State College', 'Urumqi', 'Oran', 'Killeen', 'Strasburg', 'Blantyre', 'Zagreb', 'Amsterdam', 'Paluma', 'Aspen', 'Srinagar', 'Kobe', 'Weihai', 'Antigua', 'North Platte', 'Pamplona', 'Tunxi', 'Okinawa', 'Lubumbashi', 'Montpellier', 'Los Angeles', 'Asheville', 'Tongatapu', 'Abidjan', 'Lincoln', 'Ube', 'Djibouti', 'Salina', 'Eugene', 'Guiyang', 'Manaus', 'Brussels', 'Catania', 'Helsinki', 'Fresno', 'Chibougamau', 'Huatulco', 'Atlanta', 'Basra', 'East London', 'Kochi', 'Ancona', 'Varanasi', 'Erbil', 'Bamako', 'Burbank', 'Milwaukee', 'Rock Springs', 'Wabush', 'Baltimore', 'Pangnirtung', 'Gaziantep', 'Cancun', 'Yellowknife', 'Odesa', 'Dryden', 'Hefei', 'Cork', 'New Orleans', 'Yanji', 'Juliaca', 'Toulouse', 'Penang', 'Sibiu', 'Yangon', 'Belo Horizonte', 'Chiclayo', 'Monrovia', 'Aberdeen', 'Jinjiang', 'Guadalajara', 'Sundsvall', 'Delhi', 'Jodhpur', 'Dakar', 'Kerikeri', 'Corpus Christi', 'Tottori', 'Maputo', 'Chania', 'Palanga', 'Tenerife', 'Casablanca', 'Jaipur', 'Cleveland', 'Galapagos Islands', 'Shenzhen', 'Inuvik', 'Mudanjiang', 'Praia', 'Guangzhou', 'Funchal', 'Oyama', 'Taipei', 'Kapuskasing', 'Yibin', 'Indre', 'Ulanhot', 'San Antonio', 'Gisborne', 'Minot', 'Gothenburg', 'Cairo', 'Orlando', 'Nanning', 'Graz', 'Teresina', 'Denizli', 'Dublin', 'Bucharest', 'Wuxi', 'Kuwait', 'Malta', 'Athens', 'Hilo', 'Chihuahua', 'Madura', 'Saskatoon', 'Wuhan', 'Nairobi', 'Luanda', 'Kaunas', 'Perth', 'Udaipur', 'Dresden', 'Gran Canaria', 'Karamay', 'Kiruna', 'Troms', 'Dunedin', 'Shenyang', 'Kahului', 'Bozeman', 'Nassau', 'Nuremberg', 'Silchar', 'Hanover', 'Bastia', 'Acapulco', 'Venice', 'Bhopal', 'Grenada', 'Porto Alegre', 'Olbia', 'Dharan', 'Guam', 'Medicine Hat', 'Aalborg', 'Dalian', 'Taiyuan', 'Hokitika', 'Kelowna', 'Ponta Delgada', 'Nashville', 'Fayetteville (Arkansas)', 'Bergen', 'Natal', 'Bordeaux', 'Columbus', 'Katowice', 'Cali', 'Mogadishu', 'Redding', 'Vientiane', 'Goa', 'Yinchuan', 'Ellington', 'Surat Thani', 'Amman', 'Miami', 'Changchun', 'Dubai', 'Ivalo', 'Moncton', 'Lalibela', 'Erie', 'Samar', 'Castlegar', 'Ningbo', 'Warsaw', 'Laramie', 'Madrid', 'Austin', 'Sharjah', 'Wellington', 'Bakersfield', 'Nagoya', 'Yap', 'Bremen', 'Nagasaki', 'Houston', 'Kumamoto', 'Qingdao', 'Alicante', 'Buenos Aires', 'Faro', 'Mobile', 'Osaka', 'Vadodara', 'Klagenfurt', 'Havana', 'Porto Seguro', 'Nadi', 'Coimbatore', 'Johannesburg', 'Tampico', 'Baku', 'Pomona', 'Tauranga', 'Sarnia', 'Mammoth Lakes', 'Rijeka', 'Puerto Vallarta', 'Toronto', 'Tegucigalpa', 'Hakodate', 'Livingstone', 'Shiraz', 'Napier', 'Jamnagar', 'Naples', 'Paducah', 'Yiwu', 'Barranquilla', 'Prince George', 'Saga', 'Appleton', 'Guatemala City', 'Boston', 'Budapest', 'Douala', 'Ganzhou', 'Kalmar', 'Shanghai', 'Camarillo', 'Tampere', 'Malatya', 'Madurai', 'Mont-Tremblant', 'Kushiro', 'Andong', 'Denver', 'Santo Domingo', 'Tallinn', 'Plattsburgh', 'Miyazaki', 'Pueblo', 'Sioux Falls', 'Tampa', 'Cotonou', 'Dhahran', 'Amarillo', 'Bonaire', 'Nanjing', 'Dayton', 'Iwakuni', 'Glasgow', 'Paderborn', 'Luxembourg', 'Kalamata', 'Samara', 'Yekaterinburg', 'Kahramanmaras', 'Gambela', 'Flint', 'Lubbock', 'Mombasa', 'Piura', 'Saipan', 'Mauritius', 'Riyadh', 'Changsha', 'Rouyn-Noranda', 'Ufa', 'Pittsburgh', 'Pohnpei', 'Valledupar', 'Sarajevo', 'Hatay', 'Windhoek', 'Charlottesville', 'Arequipa', 'Aruba', 'Cagliari', 'Imphal', 'Manus', 'Hoedspruit', 'Datong', 'Thompson', 'Aarhus', 'Resolute', 'Tangier', 'Muskegon', 'Turku', 'Tehran', 'Leipzig', 'Invercargill', 'Belgrade', 'Chengdu', 'Lake Charles', 'Munich', 'Nagpur', 'Linyi', 'Thessaloniki', 'Raipur', 'Dallas', 'Kaohsiung', 'Van', 'Vienna', 'Vilnius', 'Akita', 'Gaya', 'Goiana', 'Malabon', 'Comox', 'Gondar', 'Tirana', 'Quebec', 'Idaho Falls', 'Manila', 'Tokushima', 'Beihai', 'Palm Springs', 'George', 'Tianjin', 'Cozumel', 'Curitiba', 'Molde', 'Pointe-Noire', 'Lagos', 'Liberal', 'Durban', 'Belize City', 'Bol', 'Veracruz', 'Leh', 'Bhubaneswar', 'Canberra', 'Omaha', 'Palana', 'Kalamazoo', 'Vaasa', 'Malaga', 'Salin', 'Allentown', 'Taif', 'Calvi', 'Antalya', 'Minsk', 'Kosrae', 'Lyon', 'Salzburg', 'Casper', 'Ankaran', 'Beijing', 'Cody', 'Colorado Springs', 'Roatan', 'Bologna', 'Lucknow', 'Biarritz', 'Niamey', 'Port Harcourt', 'Dunhuang', 'Adelaide', 'Karachi', 'Gillette', 'Indianapolis', 'Buffalo', 'Detroit', 'Nouakchott', 'Verona', 'Honolulu', 'Rosario', 'Haugesund', 'Moab', 'New Plymouth', 'Nampula', 'Lushan', 'Taichung', 'Ahmedabad', 'Nevsehir', 'Izmir', 'Delphi', 'Milan', 'Reykjavik', 'Marseille', 'Bujumbura', 'Leticia', 'Iquitos', 'Bishkek', 'Beirut', 'Aswan', 'Sofia', 'Tucson', 'Sandspit', 'Dhaka', 'Nanaimo', 'Zanzibar', 'Evansville', 'Yantai', 'Vence', 'Kenora', 'Aguascalientes', 'Lima', 'Missoula', 'Szczecin', 'Chios', 'Mashhad', 'Juba', 'Linz', 'Sanya', 'Karlsruhe', 'Kherson', 'Whitehorse', 'Changzhou', 'Split', 'Chattanooga', 'Westchester County', 'San Salvador', 'Faroe Islands', 'Rarotonga', 'Cangzhou', 'Abuja', 'Shannon', 'Dushanbe', 'Albuquerque', 'Savannah', 'Victoria Falls', 'Tunis', 'Zhanjiang', 'Florianopolis', 'Lhasa', 'Kansas City', 'Kazan', 'Hamburg', 'Turin', 'Okayama', 'Montreal', 'Berlin', 'Patna', 'Khabarovsk', 'Surabaya', 'Terrace', 'Iberia', 'Riga', 'Regina', 'Doha', 'Baghdad', 'Samarra', 'Barcelona', 'Maracaibo', 'Copenhagen', 'Haikou', 'Barbados', 'Kinshasa', 'Harbin', 'Accra', 'Baotou', 'Anning', 'Conakry', 'Komatsu', 'Oita', 'Saginaw', 'Petrolina', 'Krasnodar', 'Pereira', 'Paris', 'Kigali', 'Daocheng', 'Reno', 'Charlotte', 'Singapore', 'Calgary', 'Sal', 'Lusaka', 'Bloemfontein', 'Pristina', 'Pula', 'Huzhou', 'Ibiza', 'Seoul', 'Bristol', 'Majuro', 'Salinas', 'Myrtle Beach', 'Manzanillo', 'Trondheim', 'Bissau', 'Asturias', 'Antananarivo', 'Anchorage', 'Hanoi', 'Podgorica', 'Shantou', 'Presque Isle', 'Gaborone', 'Yerevan', 'Nakashibetsu', 'Vigo', 'Dandong', 'Tabriz', 'Colombo', 'Mendoza', 'Phoenix', 'Rhodes', 'Shreveport', 'Santa Marta', 'Nanchang', 'Mangalore', 'Kefalonia', 'Skopje', 'Daqing', 'Bucaramanga', 'Guilin', 'Memphis', 'Lihue', 'Liberia', 'Marrakech', 'Lanzhou', 'Billings', 'Drayton', 'Yancheng', 'Pisa', 'Pretoria', 'Yichang', 'Xiangfan', 'Vancouver', 'Little Rock', 'Melbourne', 'Alta', 'Palmas', 'Prince Rupert', 'Friedrichshafen', 'Roanoke', 'Tulsa', 'Khajuraho', 'Asahikawa', 'Genoa', 'Wenzhou', 'Fargo', 'Bilbao', 'Quito', 'Zhuhai', 'Brisbane', 'Aqaba', 'Kathmandu', 'Tokyo', 'Diyarbakir', 'Jakarta', 'Adana', 'Santa Barbara', 'Tirupati', 'Aizawl', 'Cincinnati', 'Montego Bay', 'Innsbruck', 'Kristiansand', 'Yonago', 'Nice', 'Mexico City', 'Kabul', 'Chaoyang', 'Timmins', 'Ndola', 'Malabo', 'Christchurch', 'Paraparaumu', 'Huizhou', 'Dalaman', 'Skiathos', 'Florence', 'Hobbs', 'Kuala Lumpur', 'Istanbul', 'Wausau', 'Grand Junction', 'Lethbridge', 'Najaf', 'Morelia', 'Guayaquil', 'Khartoum', 'Liuzhou']
"""

llm = GPTChatCompletion(api_key=API_KEY)
queries = ["Seeking cities for a family vacation", 
           "Which cities offer the best culinary experiences for food lovers?",
           "What cities are best for a romantic getaway?",
           "What are the top travel cities for adventure seekers?",
           "Which cities are ideal for art and culture enthusiasts?",
           "Can you suggest cities that are great for winter sports?",
           "I want to find cities with good theme parks",
           ]
index = 0  # Initialize index outside the loop
for query in tqdm(queries):
    print(f"Processing query: {query}")
    messages = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": prompt.format(query=query)}
    ]

    response = llm.generate(messages)
    # Save the response, named uniquely by the incremented index
    with open(f"data/{index}_labels.json", "w") as file:
        json.dump(response, file, indent=4)
    index += 1  # Increment index after each query is processed
